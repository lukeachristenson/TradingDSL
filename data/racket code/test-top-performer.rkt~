#lang racket

;; Trading Strategy DSL - Top Performer Strategy Implementation
;; This module defines the top-performer strategy generator and supporting functions

(provide top-performer)

;; Import required data handling functions from existing modules
(require "data.rkt") ; For data manipulation functions

;; Define interval constants for clarity
(define 1y 252)  ; ~252 trading days in a year
(define 6m 126)  ; ~126 trading days in 6 months
(define 3m 63)   ; ~63 trading days in 3 months
(define 1m 21)   ; ~21 trading days in a month
(define 5d 5)    ; 5 trading days in a week

;; top-performer: Creates a strategy that selects stocks based on historical performance
;; #:interval - Time period to consider (symbol, e.g., '1y, '6m, '5d)
;; Returns a strategy function that takes market data and returns weighted stock selections
(define (top-performer #:interval interval)
  (lambda (market-data)
    ;; Convert symbolic interval to numeric trading days
    (define interval-days 
      (cond [(eq? interval '1y) 1y]
            [(eq? interval '6m) 6m]
            [(eq? interval '3m) 3m]
            [(eq? interval '1m) 1m]
            [(eq? interval '5d) 5d]
            [else (error "Unsupported interval: " interval)]))
    
    ;; Get filtered data for the specified interval
    (define filtered-data (filter-data-by-interval market-data interval-days))
    
    ;; Calculate performance for each stock
    (define performances (calculate-performances filtered-data interval-days))
    
    ;; Rank and weight the stocks
    (define weighted-stocks (rank-and-weight-stocks performances))
    
    ;; Normalize weights to sum to 100
    (normalize-weights weighted-stocks)))

;; filter-data-by-interval: Filters market data for the specified time interval
;; market-data - Full market data structure
;; interval-days - Number of trading days to include
;; Returns filtered market data
(define (filter-data-by-interval market-data interval-days)
  ;; Get all dates in the data, sort them
  (define all-dates 
    (sort 
     (remove-duplicates
      (for/list ([(k v) (in-hash market-data)])
        (key-date k)))
     string>?))
  
  ;; Select only the most recent dates based on interval
  (define recent-dates 
    (if (> (length all-dates) interval-days)
        (take all-dates interval-days)
        all-dates))
  
  ;; Filter the market data to only include the selected dates
  (for/hash ([(k v) (in-hash market-data)]
             #:when (member (key-date k) recent-dates))
    (values k v)))

;; calculate-performances: Calculates performance for each stock
;; filtered-data - Market data filtered for the appropriate time interval
;; interval-days - Number of trading days in the interval
;; Returns a hash map of ticker -> performance percentage
(define (calculate-performances filtered-data interval-days)
  ;; Get unique tickers in the filtered data
  (define tickers
    (remove-duplicates
     (for/list ([(k v) (in-hash filtered-data)])
       (key-ticker k))))
  
  ;; Calculate performance for each ticker
  (for/hash ([ticker tickers])
    ;; Get all data points for this ticker
    (define ticker-data
      (for/list ([(k v) (in-hash filtered-data)]
                 #:when (equal? (key-ticker k) ticker))
        (cons (key-date k) v)))
    
    ;; Sort data points by date
    (define sorted-data (sort ticker-data (lambda (a b) (string<? (car a) (car b)))))
    
    ;; Calculate return if we have enough data
    (define performance
      (if (>= (length sorted-data) 2)
          (let* ([oldest-point (first sorted-data)]
                 [newest-point (last sorted-data)]
                 [start-price (stock-data-close (cdr oldest-point))]
                 [end-price (stock-data-close (cdr newest-point))])
            (if (and (number? start-price) (number? end-price) (positive? start-price))
                (* 100 (/ (- end-price start-price) start-price)) ; Return as percentage
                0)) ; If invalid data, return 0
          0)) ; If insufficient data, return 0
    
    (values ticker performance)))

;; rank-and-weight-stocks: Ranks stocks by performance and assigns weights
;; performances - Hash map of ticker -> performance percentage
;; Returns a hash map of ticker -> weight
(define (rank-and-weight-stocks performances)
  ;; Convert hash to list of (ticker . performance) pairs
  (define perf-list
    (for/list ([(ticker perf) (in-hash performances)])
      (cons ticker perf)))
  
  ;; Sort by performance in descending order
  (define ranked-list
    (sort perf-list (lambda (a b) (> (cdr a) (cdr b)))))
  
  ;; Assign linearly decreasing weights (highest performer gets 100, decreases linearly)
  (define max-weight 100)
  (define min-weight 0)
  
  (if (empty? ranked-list)
      (make-hash) ; Return empty hash if no stocks
      (let* ([total-stocks (length ranked-list)]
             [weight-step (if (= total-stocks 1) 
                             0 
                             (/ (- max-weight min-weight) (sub1 total-stocks)))])
        ;; Create hash map with weights
        (for/hash ([pair ranked-list]
                   [i (in-range total-stocks)])
          (values (car pair) (- max-weight (* i weight-step)))))))

;; Key accessor functions
(define (key-ticker k) (key-ticker k))
(define (key-date k) (key-date k))

;; Test the implementation
(module+ test
  (require rackunit)
  
  ;; Create a simple test dataset
  (define test-data (make-hash))
  
  ;; Add some test data points
  (hash-set! test-data 
             (make-key "AAPL" "2023-01-01") 
             (make-stock-data 150.0 155.0))
  
  (hash-set! test-data 
             (make-key "AAPL" "2023-01-02") 
             (make-stock-data 155.0 160.0))
  
  (hash-set! test-data 
             (make-key "MSFT" "2023-01-01") 
             (make-stock-data 250.0 255.0))
  
  (hash-set! test-data 
             (make-key "MSFT" "2023-01-02") 
             (make-stock-data 255.0 252.0))
  
  ;; Create a top performer strategy
  (define test-strat (top-performer #:interval '5d))
  
  ;; Test the strategy
  (define result (test-strat test-data))
  
  ;; Test that AAPL has a higher weight than MSFT 
  ;; (since AAPL went from 155 to 160, while MSFT went from 255 to 252)
  (check-true (> (hash-ref result "AAPL") (hash-ref result "MSFT")))
)